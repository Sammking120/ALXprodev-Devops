#!/bin/bash

# List of Pokémon to fetch
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Set variables
API_BASE_URL="https://pokeapi.co/api/v2/pokemon
ERROR_FILE="errors.txt"
MAX_RETRIES=3
RETRY_DELAY=5
MAX_PARALLEL=3 # Limit concurrent processes to avoid overwhelming API

# Function to check internet connectivity
check_internet() {
    ping -c 1 google.com >/dev/null 2>&1
    return $?
}

# Function to log errors
log_error() {
    echo "$(date): $1" >> "$ERROR_FILE"
}

# Function to fetch data for a single Pokémon
fetch_pokemon_data() {
    local pokemon=$1
    local output_file="${pokemon}.json"
    local attempt=1
    local success=0

    echo "Fetching data for $pokemon (PID $$)..."
    
    while [ $attempt -le $MAX_RETRIES ]; do
        echo "Attempt $attempt of $MAX_RETRIES for $pokemon..."
        
        if curl -s -o "$output_file" "$API_BASE_URL/$pokemon"; then
            # Check if response is valid JSON
            if jq . "$output_file" >/dev/null 2>&1; then
                success=1
                break
            else
                log_error "Invalid JSON response for $pokemon on attempt $attempt"
                rm "$output_file"
            fi
        else
            log_error "Failed to fetch data for $pokemon on attempt $attempt"
        fi
        
        attempt=$((attempt + 1))
        
        if [ $attempt -le $MAX_RETRIES ]; then
            echo "Waiting $RETRY_DELAY seconds before retry for $pokemon..."
            sleep $RETRY_DELAY
        fi
    done

    if [ $success -eq 1 ]; then
        echo "Successfully fetched data for $pokemon and saved to $output_file"
    else
        log_error "Failed to fetch valid data for $pokemon after $MAX_RETRIES attempts"
        return 1
    fi
}

# Check internet connectivity
if ! check_internet; then
    log_error "No internet connection available"
    exit 1
fi

# Array to keep track of background process PIDs
pids=()
active_processes=0

# Loop through Pokémon list and fetch data in parallel
for pokemon in "${POKEMON_LIST[@]}"; do
    # Start fetch in background
    fetch_pokemon_data "$pokemon" &
    pids+=($!)
    active_processes=$((active_processes + 1))

    # If maximum parallel processes reached, wait for some to complete
    if [ $active_processes -ge $MAX_PARALLEL ]; then
        for pid in "${pids[@]}"; do
            wait "$pid" 2>/dev/null && pids=(${pids[@]/$pid}) # Remove completed PID
            active_processes=$((active_processes - 1))
        done
    fi
done

# Wait for all remaining background processes to complete
for pid in "${pids[@]}"; do
    wait "$pid" 2>/dev/null
done

# Check if all files were created successfully
all_success=1
for pokemon in "${POKEMON_LIST[@]}"; do
    if [ ! -f "${pokemon}.json" ]; then
        all_success=0
        log_error "Missing output file for $pokemon"
    fi
done

if [ $all_success -eq 1 ]; then
    echo "Successfully fetched data for all Pokémon"
else
    echo "Some Pokémon data could not be fetched. Check $ERROR_FILE for details."
    exit 1
fi